// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  username     String   @unique
  passwordHash String
  firstName    String
  lastName     String
  bio          String?
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  posts            Post[]
  comments         Comment[]
  likes            Like[]
  friendsAdded     Friendship[]    @relation("UserFriends")
  friendOf         Friendship[]    @relation("FriendUser")
  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User      @relation(fields: [authorId], references: [id])
  authorId Int
  comments Comment[]
  likes    Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User @relation(fields: [authorId], references: [id])
  authorId Int
  post     Post @relation(fields: [postId], references: [id])
  postId   Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@unique([userId, postId])
}

model Friendship {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user     User @relation("UserFriends", fields: [userId], references: [id])
  userId   Int
  friend   User @relation("FriendUser", fields: [friendId], references: [id])
  friendId Int

  @@unique([userId, friendId])
}

model FriendRequest {
  id        Int                 @id @default(autoincrement())
  status    FriendRequestStatus
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  sender     User @relation("SentRequests", fields: [senderId], references: [id])
  senderId   Int
  receiver   User @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId Int

  @@unique([senderId, receiverId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
